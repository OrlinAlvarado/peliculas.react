{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Details.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","id","poster","title","year","to","src","alt","MoviesList","movies","map","movie","key","imdbID","Year","Poster","Home","usedSearch","_handleResults","length","_renderResults","ButtonBackToHome","Detail","window","history","back","movieId","match","params","_fetchMovie","Actors","Metascore","Plot","NotFound","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58c3b74f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Title = ({children}) => (\r\n    <h1 className=\"title\">{children}</h1>\r\n)","import React, { Component } from \"react\";\r\n\r\nconst API_KEY = 'ba00d2df'\r\nexport class SearchForm extends Component{\r\n    state = {\r\n        inputMovie: ''\r\n    }\r\n\r\n    _handleChange = (e) => {\r\n        this.setState({\r\n            inputMovie:e.target.value\r\n        })\r\n    }\r\n\r\n    _handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { inputMovie } = this.state\r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\r\n            .then(res => res.json())\r\n            .then(results => {\r\n                const { Search = [], totalResults = '0' } = results\r\n                console.log({Search, totalResults})\r\n                this.props.onResults(Search)\r\n            })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <form onSubmit={this._handleSubmit}>\r\n            <div className=\"field has-addons\">\r\n                <div className=\"control\">\r\n                    <input \r\n                        className=\"input\" \r\n                        onChange={this._handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Movie to search...\" />\r\n                </div>\r\n                <div className=\"control\">\r\n                    <button className=\"button is-info\">\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Movie extends Component{\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        title: PropTypes.string,\r\n        year: PropTypes.string,\r\n        poster: PropTypes.string\r\n    }\r\n    render(){\r\n        const { id, poster, title, year } = this.props\r\n        return(\r\n            <Link to={`/detail/${id}`} className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image\">\r\n                    <img \r\n                        src={poster} \r\n                        alt={title} \r\n                        />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                    <div className=\"media-content\">\r\n                        <p className=\"title is-4\">{title}</p>\r\n                        <p className=\"subtitle is-6\">{year}</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n                </div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport Movie from './Movie'\r\n\r\nclass MoviesList extends Component{\r\n    static propTypes = {\r\n        movies: PropTypes.array\r\n    }\r\n    render(){\r\n    const { movies } = this.props\r\n\r\n    return (\r\n       <div className='MoviesList'>\r\n           {\r\n            movies.map(movie => {\r\n                return (\r\n                    <div key={movie.imdbID} className='MoviesList-item'>\r\n                    <Movie \r\n                        id={movie.imdbID}\r\n                        title={movie.Title}\r\n                        year={movie.Year} \r\n                        poster={movie.Poster}\r\n                        />\r\n                    </div>\r\n                )\r\n            })\r\n           }\r\n       </div> \r\n    )\r\n\r\n     \r\n    }\r\n}\r\n\r\nexport default MoviesList","import React, { Component} from 'react'\r\nimport { Title } from '../components/Title';\r\nimport { SearchForm } from '../components/SearchForm';\r\nimport MoviesList  from '../components/MoviesList';\r\n\r\nexport class Home extends Component{\r\n    state = { usedSearch:false, results: []}\r\n\r\n  _handleResults = (results) => {\r\n    this.setState({\r\n      results,\r\n      usedSearch:true\r\n    })\r\n  }\r\n\r\n  _renderResults (){\r\n    \r\n    return this.state.results.length === 0\r\n      ? <p>Sorry! Results not found</p>\r\n      : <MoviesList movies={this.state.results} />\r\n  }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Title>Search Movies</Title>\r\n                <div className='SearchForm-wrapper'>\r\n                <SearchForm  onResults={this._handleResults}/>\r\n                </div>\r\n                {\r\n                this.state.usedSearch\r\n                ? this._renderResults()\r\n                : <small>Use the form to search a movie</small>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const ButtonBackToHome = () => (\r\n    <Link\r\n        className='button is-info'\r\n        to='/'>\r\n            Volver a la portada\r\n        </Link>\r\n)","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { ButtonBackToHome } from \"../components/ButtonBackToHome\";\r\n\r\nconst API_KEY = 'ba00d2df'\r\n\r\nexport class Detail extends Component{\r\n    static propTypes ={\r\n        match: PropTypes.shape({\r\n            params: PropTypes.object,\r\n            isExact: PropTypes.bool,\r\n            path: PropTypes.string,\r\n            url: PropTypes.string\r\n        })\r\n    }\r\n    state = { movie: {}}\r\n\r\n    _fetchMovie({ id }){\r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\r\n        .then(res => res.json())\r\n        .then(movie => {\r\n            console.log(movie)\r\n            this.setState({ movie })\r\n        })\r\n    }\r\n\r\n    _goBack(){\r\n        window.history.back()\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.props)\r\n        const { movieId } = this.props.match.params\r\n        this._fetchMovie({ id: movieId })\r\n        \r\n    }\r\n    render(){\r\n        const { Title, Poster, Actors, Metascore, Plot} = this.state.movie\r\n        return (\r\n            <div>\r\n                <ButtonBackToHome />\r\n\r\n                <h1>{Title}</h1>\r\n                <img src={Poster} alt={Title} />\r\n                <h3>{Actors}</h3>\r\n                <span>{Metascore}</span>\r\n                <p>{Plot}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { ButtonBackToHome } from '../components/ButtonBackToHome'\r\n\r\nexport const NotFound = () => (\r\n    <div>\r\n        <h1 className='title'>404!</h1>\r\n        <h2 className='subtitle'>No existe la página</h2>\r\n        <ButtonBackToHome />\r\n    </div>\r\n)","import React, { Component } from 'react';\nimport { Switch, Route} from 'react-router-dom'\n\nimport {Home} from './pages/Home'\nimport { Detail } from './pages/Details'\nimport { NotFound } from './pages/NotFound'\n\nimport './App.css';\nimport 'bulma/css/bulma.css'\n\nclass App extends Component {\n  \n  render(){\n      return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/detail/:movieId' component={Detail} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}